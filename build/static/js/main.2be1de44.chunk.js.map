{"version":3,"sources":["quotations.js","App.js","reportWebVitals.js","index.js"],"names":["Quotation","props","console","log","quote","params","isLoaded","author","className","App","useState","setError","setIsLoaded","setAuthor","setQuote","onClick","fetch","then","response","json","data","content","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uKAkBeA,MAhBf,SAAmBC,GACfC,QAAQC,IAAIF,GACd,IAAMG,EAAQH,EAAMI,OAAOC,SACvBL,EAAMI,OAAOD,MACb,eACEG,EAASN,EAAMI,OAAOC,SACxBL,EAAMI,OAAOE,OACb,YACJ,OACE,gCACE,qBAAIC,UAAU,mCAAd,mBAAmDJ,EAAnD,YACA,oBAAGI,UAAU,8DAAb,cAA6ED,SC2BpEE,MArCf,WAAgB,IAAD,EACaC,mBAAS,MADtB,mBACCC,GADD,aAEmBD,oBAAS,GAF5B,mBAENJ,EAFM,KAEIM,EAFJ,OAGeF,mBAAS,IAHxB,mBAGNH,EAHM,KAGEM,EAHF,OAIaH,mBAAS,IAJtB,mBAINN,EAJM,KAICU,EAJD,KAsBb,OACE,qBAAKN,UAAU,gBAAf,SACE,sBAAKA,UAAU,uBAAf,UACE,cAAC,EAAD,CAAWH,OAAQ,CAAEE,SAAQH,QAAOE,cACpC,wBACEE,UAAU,6QACVO,QAtBc,WACpBC,MAAM,+CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MACC,SAACG,GACCR,GAAY,GACZC,EAAUO,EAAKb,QACfO,EAASM,EAAKC,YAEhB,SAACC,GACCV,GAAY,GACZD,EAASW,OASX,6BCjBOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.2be1de44.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Quotation(props) {\r\n    console.log(props)\r\n  const quote = props.params.isLoaded \r\n    ? props.params.quote \r\n    : \"God is dead.\";\r\n  const author = props.params.isLoaded\r\n    ? props.params.author\r\n    : \"Nietzsche\";\r\n  return (\r\n    <div>\r\n      <h1 className=\"text-xl md:text-6xl lg:text-11xl\">“{quote}”</h1>\r\n      <p className=\"text-xl float-right md:text-4xl md:float-right lg:text-10xl\">-{author}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Quotation;\r\n","import React, { useState } from \"react\";\nimport Quotation from \"./quotations\";\n\nfunction App() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [author, setAuthor] = useState([]);\n  const [quote, setQuote] = useState([]);\n\n  const handleOnClick = () => {\n    fetch(\"https://api.quotable.io/random?maxLength=33\")\n      .then((response) => response.json())\n      .then(\n        (data) => {\n          setIsLoaded(true);\n          setAuthor(data.author);\n          setQuote(data.content);\n        },\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      );\n  };\n\n  return (\n    <div className=\"flex h-screen\">\n      <div className=\"m-auto flex flex-col\">\n        <Quotation params={{ author, quote, isLoaded }} />\n        <button\n          className=\"absolute text-lg md:text-base xl:text-5xl  bottom-0 left-0 md:left-2/3 md:bottom-1/4 w-full h-24 md:h-12 md:w-36 xl:w-96 xl:h-36 bg-white hover:bg-gray-100 text-gray-800 font-semibold md:py-2 md:px-4 py-1 px-2 border border-gray-400 rounded shadow focus:outline-none\"\n          onClick={handleOnClick}\n        >\n          New Quote\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}